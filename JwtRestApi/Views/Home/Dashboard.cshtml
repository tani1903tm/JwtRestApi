@model MultilingualCRUD_Api.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>MultilingualCRUD Dashboard</h1>
        <p>Welcome, @Model.CurrentUser?.Username!</p>
    </div>

    <div class="dashboard-content">
        <!-- Navigation Tabs -->
        <nav class="tabs">
            <button class="tab active" data-tab="users" onclick="switchTab('users')">
                Users <span class="count">(@Model.Users.Count)</span>
            </button>
            <button class="tab" data-tab="roles" onclick="switchTab('roles')">
                Roles <span class="count">(@Model.Roles.Count)</span>
            </button>
        </nav>

        <!-- Users Section -->
        <div id="usersSection" class="content-section">
            <div class="section-header">
                <h2>Users</h2>
                <p>Manage user accounts and permissions</p>
                <button class="btn btn-primary" onclick="openUserModal()">Add User</button>
            </div>
            <div class="list-container">
                @if (Model.Users.Any())
                {
                    @foreach (var user in Model.Users)
                    {
                        <div class="list-item">
                            <div class="list-item-content">
                                <div class="avatar">@user.Username.First().ToString().ToUpper()</div>
                                <div class="item-info">
                                    <h3>@user.Username</h3>
                                    <p>@user.Email</p>
                                </div>
                            </div>
                            <div class="item-actions">
                                <button class="btn btn-sm btn-secondary" onclick="editUser(@user.Id)">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteUser(@user.Id)">Delete</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <h3>No users found</h3>
                        <p>Get started by adding your first user.</p>
                        <button class="btn btn-primary" onclick="openUserModal()">Add User</button>
                    </div>
                }
            </div>
        </div>

        <!-- Roles Section -->
        <div id="rolesSection" class="content-section" style="display: none;">
            <div class="section-header">
                <h2>Roles</h2>
                <p>Manage user roles and permissions</p>
                <button class="btn btn-primary" onclick="openRoleModal()">Add Role</button>
            </div>
            <div class="list-container">
                @if (Model.Roles.Any())
                {
                    @foreach (var role in Model.Roles)
                    {
                        <div class="list-item">
                            <div class="list-item-content">
                                <div class="item-info">
                                    <h3>@role.Name</h3>
                                    <p>@(role.Description ?? "No description")</p>
                                </div>
                            </div>
                            <div class="item-actions">
                                <button class="btn btn-sm btn-secondary" onclick="editRole(@role.Id)">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteRole(@role.Id)">Delete</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <h3>No roles found</h3>
                        <p>Get started by adding your first role.</p>
                        <button class="btn btn-primary" onclick="openRoleModal()">Add Role</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
            
            // Update content sections
            document.querySelectorAll('.content-section').forEach(s => s.style.display = 'none');
            document.getElementById(tab + 'Section').style.display = 'block';
        }

        function openUserModal() {
            const username = prompt('Enter username:');
            if (username === null) return;
            const email = prompt('Enter email:');
            if (email === null) return;
            const password = prompt('Enter password:');
            if (password === null) return;

            fetch('/api/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password })
            }).then(async r => {
                if (!r.ok) {
                    const t = await r.text();
                    alert('Failed to create user: ' + (t || r.status));
                    return;
                }
                location.reload();
            }).catch(e => alert('Error: ' + e));
        }

        function editUser(id) {
            const username = prompt('New username (leave blank to keep current):');
            if (username === null) return;
            const email = prompt('New email (leave blank to keep current):');
            if (email === null) return;
            const password = prompt('New password (leave blank to keep current):');
            if (password === null) return;

            const payload = { username, email, password };
            fetch(`/api/users/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            }).then(async r => {
                if (!r.ok) {
                    const t = await r.text();
                    alert('Failed to update user: ' + (t || r.status));
                    return;
                }
                location.reload();
            }).catch(e => alert('Error: ' + e));
        }

        function deleteUser(id) {
            if (confirm('Are you sure you want to delete this user?')) {
                fetch(`/api/users/${id}`, { method: 'DELETE' })
                    .then(async r => {
                        if (!r.ok && r.status !== 204) {
                            const t = await r.text();
                            alert('Failed to delete user: ' + (t || r.status));
                            return;
                        }
                        location.reload();
                    })
                    .catch(e => alert('Error: ' + e));
            }
        }

        function openRoleModal() {
            // TODO: Implement role modal
            alert('Role modal functionality will be implemented');
        }

        function editRole(id) {
            // TODO: Implement edit role
            alert('Edit role functionality will be implemented');
        }

        function deleteRole(id) {
            if (confirm('Are you sure you want to delete this role?')) {
                // TODO: Implement delete role
                alert('Delete role functionality will be implemented');
            }
        }
    </script>
}
